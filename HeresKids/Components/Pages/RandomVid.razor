@layout MainLayout;
@page "/Random";
@page "/RandomVid";
@inject NavigationManager NavigationManager;
@using HeresKids.Datamodels;
@attribute [Authorize]

@using MongoDB.Bson;
@using MongoDB.Driver;
@inject IMongoCollection<VideoListItem> VLICol;
@inject AuthenticationStateProvider asp;

<PageTitle>Random Video</PageTitle>

<AuthorizeView>
    <Authorized>
        @if(!isLoading) {
            <article data-theme="light" style="margin-top:20px;">
                <header>
                    <h2 style="text-align:center;">@vli.babyname on @vli.created.ToLocalTime().ToString("MM/dd/yyyy")</h2>
                    <button @onclick="GetAVid" class="contrast" style="width: 100%;">Get Next Random Video</button>
                </header>

                <EmbedVid Path="@selecectedVideo" />
            </article>
            
            <article data-theme="light" style="margin-top:20px;">
                <EmbedDisqus Path="@selecectedVideo" />
            </article>

        } else {
            <KidPic Height="175" Spin=true />
        }

    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content. Please Login <a href="/Login">here</a>.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private RealmUser user = new RealmUser{};
    private bool isLoading = true;
    private string selecectedVideo = null;

    private VideoListItem vli;
    private List<string> _babies = new List<string>();


    private void SwitchVideo(string path) {
        selecectedVideo = path;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await asp.GetAuthenticationStateAsync();
        _babies = authState.User.Claims.Select(c => c.Value).ToList();

        await GetAVid();
    }

    private async Task GetAVid() {
        isLoading = true;
        StateHasChanged();
        var result = await VLICol.Aggregate()
            .Match(x => x.archived == false)
            .Match(x => _babies.Contains(x.babyname))
            .Sample(1)
            .ToListAsync();

        if (result.Count > 0)
        {
            vli = result[0];
            SwitchVideo(vli.path);
        }
        isLoading = false;
        StateHasChanged();
    }


}