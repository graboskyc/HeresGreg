@layout MainLayout;
@page "/Random";
@page "/RandomVid";
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@using HeresKids.Datamodels;

<PageTitle>Random Video</PageTitle>

@if(!isLoading) {

    <article data-theme="light" style="margin-top:20px;">
        <header>
            <h2 style="text-align:center;">@vli.babyname on @vli.created.ToLocalTime().ToString("MM/dd/yyyy")</h2>
            <button @onclick="GetAVideo" class="contrast" style="width: 100%;">Get Next Random Video</button>
        </header>

        <EmbedVid Path="@selecectedVideo" />
    </article>
    
    <article data-theme="light" style="margin-top:20px;">
        <EmbedDisqus Path="@selecectedVideo" />
    </article>

} else {
    <KidPic Height="175" Spin=true />
}


@code {
    private RealmUser user = new RealmUser{};
    private bool isLoading = true;
    private string selecectedVideo = null;

    private VideoListItem vli;


    private void SwitchVideo(string path) {
        selecectedVideo = path;
        StateHasChanged();
    }

    private async Task GetAVideo() {
        isLoading = true;
        string[] args = {};
        vli = await JSRuntime.InvokeAsync<VideoListItem>("realmShim_Function", "getRandomVid", args);
        SwitchVideo(vli.path);
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            try{
                user = await JSRuntime.InvokeAsync<RealmUser>("getUserDetails");
                await GetAVideo();     
                StateHasChanged();
            } catch(Exception ex) {
                Console.WriteLine("Error in RandomVid: " + ex.Message);
                NavigationManager.NavigateTo("/");
            }
        }
    }
}