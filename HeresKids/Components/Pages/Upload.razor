@layout MainLayout;
@page "/Upload";
@page "/New";
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@using HeresKids.Datamodels;
@using System.IO;
@using System.Diagnostics;

<PageTitle>Upload a Video</PageTitle>

@if(babies!=null) {
    <div class="grid" style="margin-top:30px;">
        @foreach (var b in babies)
        {
            <div style="padding:20px;">
                <input type="radio" id="@b.name" name="baby" value="@b.name" @onclick="@(e => SelectBaby(e, b))" style="visibility:hidden">
                <label for="@b.name" class="btn btn-lg" style="font-size:2rem;color:var(--gsky-light)!important;text-align:center;background-color:#@b.babycolor !important;width:100%;border-radius:25px;">@b.name</label><br>
            </div>
        }
    </div>
    
    @if(selectedBaby != null) {
        <label class="custom-file-label" for="customFile">@selFileTitle</label>
        <InputFile OnChange="@LoadFiles" class="custom-file-input" id="customFile" />
    }
}
@if(!isLoading) {
    <button style="width:100%;">Upload</button>
} else {
    <button disabled aria-busy="true" aria-label="Loading..." style="width:100%;">Loading...</button>
}

@code {
    private RealmUser user = new RealmUser{};
    private bool isLoading = true;
    private string selecectedVideo = null;
    private string selFileTitle = "Choose Video";

    private List<Babies> babies;
    private Babies selectedBaby;
    private string uploadName;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        try {
            // upload it
            await using FileStream fs = new("/app/wwwroot/media/"+uploadName, FileMode.Create);
            await e.File.OpenReadStream(500000000).CopyToAsync(fs);

            // write to Realm
            string[] args = {selectedBaby.name, selectedBaby.babycolor, uploadName};
            await JSRuntime.InvokeVoidAsync("realmShim_Function", "setNewMedia", args);

            // do thumbnail
            System.Diagnostics.Process ffmpeg = new System.Diagnostics.Process();
            string video = "/app/wwwroot/media/"+uploadName;
            string thumb = video + ".jpg";

            ffmpeg.StartInfo.Arguments = " -i " + video + " -ss 00:00:01.000 -vframes 1 " + thumb;
            ffmpeg.StartInfo.FileName = "/ffmpeg/ffmpeg";
            ffmpeg.Start();
            ffmpeg.WaitForExit();
            ffmpeg.Close();


            // redirect
            NavigationManager.NavigateTo("/Vids");
        } catch (Exception ex) {
            Console.WriteLine(ex.ToString());
        }
    }

    private void SelectBaby(MouseEventArgs e, Babies b)
    {
        Console.WriteLine(b.name, b.babycolor);
        selectedBaby = b;
        selFileTitle = "Choose Video of " + selectedBaby.name;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            try
            {
                user = await JSRuntime.InvokeAsync<RealmUser>("getUserDetails");
                isLoading = true;
                string[] args = {};
                babies = await JSRuntime.InvokeAsync<List<Babies>>("realmShim_Function", "getBabies", args);
                selectedBaby = babies.FirstOrDefault();
                selFileTitle = "Choose Video of " + selectedBaby.name;
                Guid guid = Guid.NewGuid();
                uploadName = guid.ToString().ToUpper() + ".mp4";
                isLoading = false;
                StateHasChanged();
            } catch(Exception ex) {
                Console.WriteLine("Error in Upload: " + ex.Message);
                NavigationManager.NavigateTo("/");
            }
        }
    }
}