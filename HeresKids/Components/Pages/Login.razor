@layout LoginLayout
@page "/Login"
@page "/"
@page "/Account/Login"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider asp;
@inject IJSRuntime JSRuntime;

<PageTitle>Log In to Here's the Kids</PageTitle>


<h1>Please Login</h1>
<KidPic Height="100" Spin=false />
<br />

@if(failedLogin) {
    @if(responseMessage != "") {
        <mark>@responseMessage</mark>
    } else {
        <mark>Login failed. Please try again.</mark>
    }
}


<label for="txt_username">Email Address</label>
<input type="text" name="txt_username" id="txt_username" @bind="username" @bind:event="onchange" placeholder="Email" />

<label for="txt_password">Password</label>
<input type="password" name="txt_password" id="txt_password" @bind="password" @bind:event="onchange" placeholder="Password" />

@if(!isLoading) {
    <button @onclick="RunLogin" id="btn_login" style="width:100%;">Login</button>
} else {
    <button aria-busy="true" aria-label="Logging In..." style="width:100%;">Logging In...</button>
}


@code {
   private bool isLoading = false;
    private bool loginSuccess = false;
    private bool failedLogin = false;
    private string username = "";
    private string password;
    private string responseMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("captureEnter", "btn_login");
    }

    private async void RunLogin()
    {
        Console.WriteLine("RunLogin called with username: " + username);
        isLoading = true;        
        responseMessage = "";
        StateHasChanged();
        failedLogin = false;
        var loginRequest = new {
            Email = username,
            Password = password
        };
        try
        {
            var client = HttpClientFactory.CreateClient("Default");
            var response = await client.PostAsJsonAsync("api/Login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                loginSuccess = result?.Success ?? false;
                if (loginSuccess && result != null)
                {
                    Console.WriteLine("Login successful with token: " + result.Token);
                    var casp = asp as CustomAuthStateProvider;
                    casp?.SetToken(result.Token);
                    var authstate = await asp.GetAuthenticationStateAsync();
                    NavigationManager.NavigateTo("/Vids");
                }
                else
                {
                    failedLogin = true;
                }
            }
            else
            {
                failedLogin = true;
            }
        }
        catch(Exception ex)        
        {
            Console.WriteLine("Login failed: " + ex.Message);
        } 
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class LoginResult
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public string? Token { get; set; }
    }

    
    
}