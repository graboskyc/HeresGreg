@layout MainLayout;
@page "/DateList";
@using MongoDB.Bson
@using MongoDB.Driver;
@inject NavigationManager NavigationManager;
@using HeresKids.Datamodels;
@using System.Globalization
@inject IMongoCollection<BabyGrouping> BGCol;
@inject AuthenticationStateProvider asp;
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <article data-theme="light">
            @if(!isLoading) {
                    @foreach (var year in groupByYear)
                    {
                        <details @attributes="GetAtts(year.Key)">
                            <summary class="secondary" role="button">
                                <span>@year.Key</span>
                                <span>&nbsp;</span>
                                <span class="material-symbols-outlined">expand</span>
                            </summary>
                            <ul>
                                @foreach (var li in year) {
                                    <li style="list-style-type: none;">
                                        <div role="group">
                                            <a role="button" class="outline" style="text-decoration: none;color: #373c44;" @onclick="() => NavigateToDate(li.forYear, li.forMonth, li.baby)" >
                                                See the @li.ct videos of
                                                <b style="color:#@li.color">@li.baby</b> 
                                                from
                                                @CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(li.forMonth)  @li.forYear
                                            </a>
                                            <a role="button" class="outline" style="text-decoration: none;color: #373c44;" @onclick="() => NavigateToDate(li.forYear, li.forMonth, li.baby)" >
                                                <span class="material-symbols-outlined">arrow_forward</span>
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </details>
                        
                    }
            } else {
                <KidPic Spin=true Height="175" />
            }
        </article>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content. Please Login <a href="/Login">here</a>.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isLoading = true;
    
    IEnumerable<IGrouping<int, BabyGrouping>>? groupByYear = null;

    private void NavigateToDate(int year, int month, string baby)
    {
        NavigationManager.NavigateTo($"/Date/{year}/{month}/{baby}");
    }

    protected override async Task OnInitializedAsync() {
        
        var pipeline = new List<BsonDocument>
        {
            new BsonDocument("$group", 
            new BsonDocument
                {
                    { "_id", 
            new BsonDocument
                    {
                        { "forYear", 
            new BsonDocument("$year", "$created") }, 
                        { "forMonth", 
            new BsonDocument("$month", "$created") }, 
                        { "baby", "$babyname" }, 
                        { "color", "$babycolor" }
                    } }, 
                    { "ct", 
            new BsonDocument("$sum", 1) }
                }),
            new BsonDocument("$sort", 
            new BsonDocument
                {
                    { "_id.forYear", -1 }, 
                    { "_id.forMonth", -1 }, 
                    { "_id.baby", 1 }
                }),
            new BsonDocument("$project", 
            new BsonDocument
                {
                    { "forYear", "$_id.forYear" }, 
                    { "forMonth", "$_id.forMonth" }, 
                    { "baby", "$_id.baby" }, 
                    { "color", "$_id.color" }, 
                    { "ct", 1 }, 
                    { "_id", 0 }
                })
        };

        var results = await BGCol.Aggregate<BabyGrouping>(pipeline).ToListAsync();
        groupByYear = results.GroupBy(x=> x.forYear);
        
        isLoading = false;
    }

    private Dictionary<string, object> GetAtts(int year)
    {
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        if (year == DateTime.Now.Year) {
            attributes.Add("open", "true");
        }
        return attributes;
    }

}