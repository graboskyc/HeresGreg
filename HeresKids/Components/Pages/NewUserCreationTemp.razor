@using AspNetCore.Identity.Mongo.Model
@using Microsoft.AspNetCore.Identity
@using AspNetCore.Identity.Mongo
@using AspNetCore.Identity.Mongo.Stores
@inject UserManager<MongoUser> UserManager
@layout LoginLayout;
@page "/NewUserCreationTemp"

<PageTitle>New User</PageTitle>


<h1>Create a New User</h1>

<EditForm Model="@newUser" OnValidSubmit="CreateNewUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="txt_username">Email Address</label>
    <InputText id="txt_username" @bind-Value="newUser.Email" placeholder="Email" />

    <label for="txt_password">Password</label>
    <InputText id="txt_password" type="password" @bind-Value="newUser.Password" placeholder="Password"  />

    <label for="txt_babies">Babies (CSV)</label>
    <InputText id="txt_babies" @bind-Value="newUser.Babies" placeholder="Babies" />

    @if(!isLoading) {
        <button type="submit" style="width:100%;">Create User</button>
    } else {
        <button aria-busy="true" aria-label="Creating..." style="width:100%;">Creating...</button>
    }
</EditForm>


@code {
    private class NewUserModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string Babies { get; set; } = "Greg,Mallory,Charlie,Sophie";
    }

    private NewUserModel newUser = new NewUserModel();
    private bool isLoading = false;

    private async Task CreateNewUser()
    {
        isLoading = true;
        var identityUser = new MongoUser
        {
            UserName = newUser.Email,
            Email = newUser.Email,
            
        };
        identityUser.Claims.Add(new IdentityUserClaim<string>
        {
            ClaimType = "Email",
            ClaimValue = newUser.Email
        });

        foreach (var baby in newUser.Babies.Split(','))
        {
            identityUser.Claims.Add(new IdentityUserClaim<string>
            {
                ClaimType = "BabyName",
                ClaimValue = baby.Trim()
            });
        }

        var result = await UserManager.CreateAsync(identityUser, newUser.Password);
        isLoading = false;
        if (result.Succeeded)
        {
            // Optionally show success message or redirect
            Console.WriteLine("User created successfully.");
            isLoading = false;
        }
        else
        {
            // Optionally show error messages
            Console.WriteLine("Error creating user: " + string.Join(", ", result.Errors.Select(e => e.Description)));
        }
    }
}