@layout MainLayout;
@page "/Profile";
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@using HeresKids.Datamodels;

<PageTitle>Profile</PageTitle>

<article data-theme="light" style="margin-top:20px;">
    <header>
        <h2>Profile</h2>
    </header>

    <article>
        <header>
            <h3>Basic Information</h3>
        </header>

        <label>Name</label>
        <input type="text" @bind="txt_name" @bind:event="onchange" class="form-control" />

        <label>Phone Number</label>
        <input type="text" @bind="txt_pn" @bind:event="onchange" class="form-control" />

        <label>Subscriptions</label>
        <input type="text" @bind="txt_sub" @bind:event="onchange" class="form-control" />
    </article>

    <footer>
            @if(!isLoading) {
                <button style="width:100%;" @onclick="RunSave">Save Profile</button>
            } else {
                <button disabled aria-busy="true" aria-label="Saving..." style="width:100%;">Saving...</button>
            }
            <button class="secondary" style="width:100%;" @onclick="RunLogout">Logout</button>
   </footer>

</article>

@code {
    private RealmUser user = new RealmUser{};
    private CustomProfileData cpd = new CustomProfileData{};
    private bool isLoading = true;
    private string txt_pn = "+1";
    private string txt_name, txt_sub = "";

    private async Task RunSave() {
        isLoading = true;
        string cleanPhone = txt_pn.Replace("-","").Replace(" ","").Replace(")","").Replace("(","");
        if(cleanPhone.Substring(0,2) != "+1") {
            if(cleanPhone.Substring(0,1) == "1") {
                cleanPhone = "+"+cleanPhone;
            } else {
                cleanPhone = "+1"+cleanPhone;
            }
        }
        string[] args = { user.id, cleanPhone, txt_name, txt_sub};

        cpd = await JSRuntime.InvokeAsync<CustomProfileData>("realmShim_Function", "setMyProfile", args);
        txt_pn = cpd.pn;
        txt_name = cpd.name;
        txt_sub = string.Join(", ",  cpd.subscriptions);
        isLoading = false;
    }

    private async Task RunLogout() {
        await JSRuntime.InvokeVoidAsync("logout");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            try
            {
                user = await JSRuntime.InvokeAsync<RealmUser>("getUserDetails");
                string[] args = { user.id};
                cpd = await JSRuntime.InvokeAsync<CustomProfileData>("realmShim_Function", "getMyProfile", args);
                txt_pn = cpd.pn;
                txt_name = cpd.name;
                txt_sub = string.Join(", ",  cpd.subscriptions);
                isLoading = false;
                StateHasChanged();
                
            } catch(Exception ex) {
                Console.WriteLine("Error in Profile: " + ex.Message);
                NavigationManager.NavigateTo("/");
            }
        }
    }
}