@inherits LayoutComponentBase
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider asp;

<main class="container">

    <article>
        <header>
            <h1>Here's The Kids</h1>

            <div style="margin-top:20px;display: grid;grid-template-columns: repeat(4, 1fr);grid-template-rows: 1fr;grid-column-gap: .5rem;grid-row-gap: 0px;">
                <NavLink role="button" @onclick="@(() => NavigationManager.NavigateTo("/Vids"))" Match="NavLinkMatch.All">
                    <span class="material-symbols-outlined">home</span>
                </NavLink>
                <NavLink role="button" @onclick="@(() => NavigationManager.NavigateTo("/RandomVid"))">
                    <span class="material-symbols-outlined">shuffle</span>
                </NavLink>
                <NavLink role="button" @onclick="@(() => NavigationManager.NavigateTo("/DateList"))">
                    <span class="material-symbols-outlined">calendar_month</span>
                </NavLink>
                <NavLink role="button" @onclick="@(() => NavigationManager.NavigateTo("/Upload"))">
                    <span class="material-symbols-outlined">upload</span>
                </NavLink>
            </div>
        </header>
            
        <article style="min-height:90vh;padding:0 !important;">
            @Body
        </article>

    </article>

</main>

@code {
    private string _un = "";
    private bool _hasRun = false;
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender && !_hasRun) {
            var authState = await asp.GetAuthenticationStateAsync();
            if (!(authState.User.Identity?.IsAuthenticated ?? false)) {
                NavigationManager.NavigateTo("/Login");
            } else {
                var name = authState.User.Identity?.Name?.Split('@')[0] ?? "";
                if (!string.IsNullOrEmpty(name)) {
                    _un = char.ToUpper(name[0]) + name.Substring(1);
                } else {
                    _un = "";
                }
            }
            _hasRun = true;
            StateHasChanged();
        }
    }
}